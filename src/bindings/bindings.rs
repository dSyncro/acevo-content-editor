/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
	#[allow(unused_imports)]
	use self::super::root;
	pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
	pub const _SAL_VERSION: u32 = 20;
	pub const __SAL_H_VERSION: u32 = 180000000;
	pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
	pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
	pub const _CRT_PACKING: u32 = 8;
	pub const _HAS_EXCEPTIONS: u32 = 1;
	pub const NULL: u32 = 0;
	pub const _HAS_CXX17: u32 = 0;
	pub const _HAS_CXX20: u32 = 0;
	pub const _HAS_CXX23: u32 = 0;
	pub const _HAS_NODISCARD: u32 = 1;
	pub const WCHAR_MIN: u32 = 0;
	pub const WCHAR_MAX: u32 = 65535;
	pub const WINT_MIN: u32 = 0;
	pub const WINT_MAX: u32 = 65535;
	pub type va_list = *mut ::std::os::raw::c_char;
	unsafe extern "C" {
		pub fn __va_start(arg1: *mut root::va_list, ...);
	}
	#[repr(C)]
	#[derive(Debug, Copy, Clone, :: bytemuck :: Pod, :: bytemuck :: Zeroable)]
	pub struct __vcrt_va_list_is_reference {
		pub _address: u8,
	}
	pub const __vcrt_va_list_is_reference___the_value:
		root::__vcrt_va_list_is_reference__bindgen_ty_1 = false;
	pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
	#[repr(C)]
	#[derive(Debug, Copy, Clone, :: bytemuck :: Pod, :: bytemuck :: Zeroable)]
	pub struct __vcrt_assert_va_start_is_not_reference {
		pub _address: u8,
	}
	pub type __vcrt_bool = bool;
	unsafe extern "C" {
		pub fn __security_init_cookie();
	}
	unsafe extern "C" {
		pub fn __security_check_cookie(_StackCookie: usize);
	}
	unsafe extern "C" {
		pub fn __report_gsfailure(_StackCookie: usize) -> !;
	}
	unsafe extern "C" {
		pub static mut __security_cookie: usize;
	}
	pub type int_least8_t = ::std::os::raw::c_schar;
	pub type int_least16_t = ::std::os::raw::c_short;
	pub type int_least32_t = ::std::os::raw::c_int;
	pub type int_least64_t = ::std::os::raw::c_longlong;
	pub type uint_least8_t = ::std::os::raw::c_uchar;
	pub type uint_least16_t = ::std::os::raw::c_ushort;
	pub type uint_least32_t = ::std::os::raw::c_uint;
	pub type uint_least64_t = ::std::os::raw::c_ulonglong;
	pub type int_fast8_t = ::std::os::raw::c_schar;
	pub type int_fast16_t = ::std::os::raw::c_int;
	pub type int_fast32_t = ::std::os::raw::c_int;
	pub type int_fast64_t = ::std::os::raw::c_longlong;
	pub type uint_fast8_t = ::std::os::raw::c_uchar;
	pub type uint_fast16_t = ::std::os::raw::c_uint;
	pub type uint_fast32_t = ::std::os::raw::c_uint;
	pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
	pub type intmax_t = ::std::os::raw::c_longlong;
	pub type uintmax_t = ::std::os::raw::c_ulonglong;
	pub mod ks {
		#[allow(unused_imports)]
		use self::super::super::root;
		pub const PackageFileFlags_Directory: root::ks::PackageFileFlags = 1;
		pub const PackageFileFlags_XorCipher: root::ks::PackageFileFlags = 256;
		pub type PackageFileFlags = u16;
		#[repr(C)]
		#[derive(Debug, Copy, Clone, :: bytemuck :: Pod, :: bytemuck :: Zeroable)]
		pub struct PackageFileTableEntry {
			pub file_path: [u8; 224usize],
			pub aligmt_E0: i32,
			pub inf_flags: root::ks::PackageFileFlags,
			pub path_leng: i16,
			pub path_fnv1: u64,
			pub file_size: u64,
			pub file_offs: u64,
		}
		#[allow(clippy::unnecessary_operation, clippy::identity_op)]
		const _: () = {
			["Size of PackageFileTableEntry"]
				[::std::mem::size_of::<PackageFileTableEntry>() - 256usize];
			["Alignment of PackageFileTableEntry"]
				[::std::mem::align_of::<PackageFileTableEntry>() - 8usize];
			["Offset of field: PackageFileTableEntry::file_path"]
				[::std::mem::offset_of!(PackageFileTableEntry, file_path) - 0usize];
			["Offset of field: PackageFileTableEntry::aligmt_E0"]
				[::std::mem::offset_of!(PackageFileTableEntry, aligmt_E0) - 224usize];
			["Offset of field: PackageFileTableEntry::inf_flags"]
				[::std::mem::offset_of!(PackageFileTableEntry, inf_flags) - 228usize];
			["Offset of field: PackageFileTableEntry::path_leng"]
				[::std::mem::offset_of!(PackageFileTableEntry, path_leng) - 230usize];
			["Offset of field: PackageFileTableEntry::path_fnv1"]
				[::std::mem::offset_of!(PackageFileTableEntry, path_fnv1) - 232usize];
			["Offset of field: PackageFileTableEntry::file_size"]
				[::std::mem::offset_of!(PackageFileTableEntry, file_size) - 240usize];
			["Offset of field: PackageFileTableEntry::file_offs"]
				[::std::mem::offset_of!(PackageFileTableEntry, file_offs) - 248usize];
		};
		pub const PACKAGE_FILE_ENTRIES: usize = 131072;
		pub const PACKAGE_FILE_TABLE_SIZE: usize = 33554432;
	}
}
